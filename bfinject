#!/jb/bin/bash

CYCRIPT_PORT=1337

function help {
    echo "Syntax: $0 -p PID <-l /path/to/yourdylib  |  -L feature>"
    echo
    echo For example:
    echo "   $0 -p 1234 -L cycript               # Injects Cycript into PID, listening on port $CYCRIPT_PORT"
    echo "     or "
    echo "   $0 -p 4566 -l /path/to/evil.dylib   # Injects the .dylib of your choice"
    echo
    echo Available features:
    echo "  cycript    - Inject and run Cycript"
    echo "  decrypt    - Create a decrypted copy of the target app"
    echo "  test       - Inject a simple .dylib to make an entry in the console log"
    echo "  ispy       - Inject iSpy. Browse to http://<DEVICE_IP>:31337/"
    echo
}

#
# check args
#
if [ "$1" != "-p" ]; then
    help
    exit 1
fi

if [ "$3" != "-l" -a "$3" != "-L" ]; then
    help
    exit 1
fi

declare -a DYLIBS

if [ "$3" == "-l" ]; then
    FEATURE=""
    DYLIBS=("$4")
    PID=$2
else
    FEATURE="$4"
    PID=$2

    case "$FEATURE" in
        cycript)
            DYLIBS=(dylibs/cycript.dylib dylibs/cycript-runner.dylib)
            ;;
        
        decrypt)
            DYLIBS=(dylibs/bfdecrypt.dylib)
            ;;

        test)
            DYLIBS=(dylibs/simple.dylib)
            ;;
        ispy)
            DYLIBS=(dylibs/iSpy.dylib)
            ;;
        iSpy)
            DYLIBS=(dylibs/iSpy.dylib)
            ;;
        default)
            help
            exit 1
            ;;
    esac
fi

function clean_up {
    rm -rf "$DYLIB_DIR" >/dev/null 2>&1
    rm -f "$RANDOM_NAME"
}

#
# Entitlements for dylib injection and for our injector binary.
#
cat > entitlements.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>platform-application</key>
        <true/>
        <key>get-task-allow</key>
        <true/>
        <key>task_for_pid-allow</key>
        <true/>
        <key>com.apple.system-task-ports</key>
        <true/>
    </dict>
</plist>
EOF

for DYLIB in ${DYLIBS[@]}; do
    if [ ! -f "$DYLIB" ]; then
        echo "$DYLIB" doesn\'t exist
        clean_up
        exit 1
    fi
    
    RAND=`dd if=/dev/random bs=1 count=16 2>/dev/null | md5`
    RANDOM_NAME=`dd if=/dev/random bs=1 count=16 2>/dev/null | md5`
    DYLIB_DIR="/System/Library/Frameworks/${RAND}.framework"
    DYLIB_PATH="$DYLIB_DIR/$RAND.dylib"

    cp bfinject4realz "$RANDOM_NAME"
    chmod +x "$RANDOM_NAME"

    #
    # Find the full path to the target app binary
    #
    BINARY=`ps -o pid,command $PID|tail -n1|sed 's/^\ *//g'|cut -f2 -d\ `
    echo "[+] Injecting into '$BINARY'"

    #
    # Get the Team ID that signed the target app's binary.
    # We need this so we can re-sign the injected .dylib to fool the kernel
    # into assuming the .dylib is part of the injectee bundle.
    # This allows is to map the .dylib into the target's process space via dlopen().
    #
    echo "[+] Getting Team ID from target application..."
    TEAMID=`./jtool.liberios --sig --ent "$BINARY" 2> /dev/null | grep 'Team ID' | head -n1 |sed 's/ //g'|cut -f2 -d:|cut -f1 -d\(`
    if [ "$TEAMID" == "" ]; then
        TEAMID=`./jtool.liberios --sig --ent "$BINARY" 2> /dev/null | grep -A1 'com.apple.developer.team-identifier' | tail -n1 |sed 's/ //g'|cut -f2 -d\>|cut -f1 -d\<`
        if [ "$TEAMID" == "" ]; then
            echo "[+] WARNING: No Team ID found. Continuing regardless, but expect weird stuff to happen."
        fi
    fi

    #
    # Move the injectee dylib to a sandbox-friendly location
    #
    mkdir "$DYLIB_DIR"
    cp "$DYLIB" "$DYLIB_PATH"

    #
    # Sign the appropriate entitlements and Team ID into our dylib
    #
    echo "[+] Signing injectable .dylib with Team ID $TEAMID and platform entitlements..."
    ./jtool.liberios --sign platform --ent entitlements.xml --inplace --teamid "$TEAMID" "$DYLIB_PATH" > /dev/null 2>&1
    if [ "$?" != "0" ]; then
        echo jtool dylib signing error. barfing.
        clean_up
        exit 1
    fi

    #
    # Sign the injector binary with the entitlements
    #
    ./jtool.liberios --sign platform --ent entitlements.xml --inplace "$RANDOM_NAME" >/dev/null 2>&1
    if [ "$?" != "0" ]; then
        echo jtool "$RANDOM_NAME" signing error. barfing.
        clean_up
        exit 1
    fi

    #
    # Inject!
    #
    echo "[+] Injecting $DYLIB into target application, PID $PID"
    if [ -f /bootstrap/inject_criticald ]; then
        # This is Electra
        echo "[+] Electra detected. Using built-in /bootstrap/inject_criticald to inject the dylib"
        /bootstrap/inject_criticald $PID "$DYLIB_PATH"
    else
        # LiberiOS (assumed)
        echo "[+] LiberiOS assumed. Using Bishop Fox bfinject to inject the dylib"
        ./${RANDOM_NAME} $PID "$DYLIB_PATH"
    fi

    #
    # Clean up
    #
    clean_up
done

#
# EOF
#
echo "[+] So long and thanks for all the fish."
exit 0